frontEND

frontEnd reads a file from the command line to be scanned into tokens by
parser(), which will produce a parse tree for the back end. After parser()
makes the parse tree, traversePreorder() prints the node types and any stored
tokens, indented 2 spaces per depth in the tree.

Usage: 
	<code>./frontEnd P2_test1</code>
or:
	<code>./frontEND < P2_test1.sp18</code>

Future projects will utilize the parse tree created by frontEnd to create the
intermediate code (pseudo-Assembly) on the back end.

parser.c, parser.h and node.h

These source and header files utilize scanner() from previous projects to scan
tokens from the input file. By parsing through the tokens supplied by
scanner(), parser() and its accessory functions: program(), block(), vars(),
mvars(), expr(), M(), R(), stats(), mstats(), stat(), in(), out(), ifFunc(),
loop(), assign(), and RO() work together to represent a high-level language
BNF.

These accessory functions create a parse tree that stores both node types and
tokens, such as identifiers and integers in a parse tree. The nodes are created
using genNode(). The syntax of the language is verified by the BNF functions,
and any syntax errors are displayed by parseError(), along with the line the 
error occurred in, and what token was expected.

testTree.c and testTree.h

These source and header files contain a function to print the parse tree
created by parser(), including the types of nodes and tokens stored in the
tree. Each node is indented by 2 " " spaces times the depth that node falls
within the tree.